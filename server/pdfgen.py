from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import os

def wrap_text(pdf_canvas, text, max_width):
    # Wrap text to fit within the specified max_width
    lines = []
    current_line = ""
    
    for word in text.split():
        if pdf_canvas.stringWidth(current_line + word, 'Helvetica', 12) < max_width:
            current_line += word + " "
        else:
            lines.append(current_line.strip())
            current_line = word + " "
    
    lines.append(current_line.strip())
    
    return lines

def create_pdf_report(input_file, output_file):

    # Create a PDF document
    pdf_canvas = canvas.Canvas(output_file, pagesize=letter)
    
    # Set font and size for the title
    pdf_canvas.setFont("Helvetica-Bold", 16)
    
    # Add the big heading
    # Coordinates for the title
    title_x = pdf_canvas._pagesize[0] / 2  # Center of the page
    title_y = pdf_canvas._pagesize[1] - 50

    # Set font and size for the title
    pdf_canvas.setFont("Helvetica-Bold", 16)

    # Set text color to red
    pdf_canvas.setFillColorRGB(1, 0, 0)  # Red color

    # Draw centered string
    pdf_canvas.drawCentredString(title_x, title_y, "Report Generated by ZeroX Analyser | Anubhav Dhakal")
    pdf_canvas.setFillColorRGB(0, 0, 0)


    # Set font and size for vulnerability entries
    pdf_canvas.setFont("Helvetica", 12)

    # Initialize y-coordinate
    y_coordinate = pdf_canvas._pagesize[1] - 100

    # Iterate through the lines and extract information
    last_block_was_code = False  # Initialize flag
    for filename in os.listdir(input_folder):
        if filename.endswith(".txt"):
            input_text_file = os.path.join(input_folder, filename)

            # Open the text file and read its content
            with open(input_text_file, 'r') as file:
                lines = file.readlines()

            for line in lines:
                if line.startswith("Name"):
                    # Name (as H1)
                    vulnerability_info = line.strip().split(': ', 1)[1]
                    pdf_canvas.setFont("Helvetica-Bold", 14)
                    pdf_canvas.drawString(72, y_coordinate, f"Name: {vulnerability_info}")
                    y_coordinate -= 20  # Adjust the y-coordinate
                    last_block_was_code = False  # Reset flag

                elif line.startswith("Line"):
                    # Line Info
                    line_info = line.strip().split('-->', 1)[1]
                    pdf_canvas.setFont("Helvetica", 12)
                    pdf_canvas.drawString(72, y_coordinate, f"Line Info: {line_info}")
                    y_coordinate -= 15
                    last_block_was_code = False  # Reset flag
                    

                elif line.startswith("Code"):
                    # Code
                    code_info = line.strip().split('Code', 1)[1]
                    code_lines = wrap_text(pdf_canvas, f"Code: {code_info}", pdf_canvas._pagesize[0] - 144)

                    for code_line in code_lines:
                        pdf_canvas.drawString(72, y_coordinate, code_line)
                        y_coordinate -= 15

                    last_block_was_code = True  # Set flag

                elif line.startswith("Declaration"):
                    # Declaration Info
                    declaration_info = line.strip().split('Declaration', 1)[1]
                    declaration_lines = wrap_text(pdf_canvas, f"Declaration Info: {declaration_info}", pdf_canvas._pagesize[0] - 144)

                    for declaration_line in declaration_lines:
                        pdf_canvas.drawString(72, y_coordinate, declaration_line)
                        y_coordinate -= 15

                    last_block_was_code = False  # Reset flag

                    # Add a separator line between entries
                    pdf_canvas.line(72, y_coordinate, pdf_canvas._pagesize[0] - 72, y_coordinate)
                    y_coordinate -= 15
                    y_coordinate -= 15

                elif line.startswith("-"):
                    # Add a separator line between vulnerability entries
                    if last_block_was_code:
                        pdf_canvas.line(72, y_coordinate, pdf_canvas._pagesize[0] - 72, y_coordinate)
                        y_coordinate -= 30  # Adjust the y-coordinate

                # Check if there's a need to start a new page
                if y_coordinate < 50:
                    pdf_canvas.showPage()
                    y_coordinate = pdf_canvas._pagesize[1] - 50

    # Save the PDF
    pdf_canvas.save()


if __name__ == "__main__":
        input_folder = "Report"
        output_pdf_file = "output.pdf"

        create_pdf_report(input_folder, output_pdf_file)

        print(f"PDF report created successfully: {output_pdf_file}")
